const config = require('../config')
const { cmd, commands } = require('../command')

// üü¢ OPEN TIME COMMAND
cmd({
    pattern: "opentime",
    react: "üîñ",
    desc: "To open group after a set time",
    category: "group",
    use: '.opentime <number> <second|minute|hour|day>',
    filename: __filename
},
async (conn, mek, m, { from, l, args, q, isGroup, isAdmins, reply }) => {
    try {
        if (!isGroup) return reply(ONLGROUP)
        if (!isAdmins) return reply(ADMIN)

        let timer;
        if (args[1] === 'second') {
            timer = Number(args[0]) * 1000
        } else if (args[1] === 'minute') {
            timer = Number(args[0]) * 60000
        } else if (args[1] === 'hour') {
            timer = Number(args[0]) * 3600000
        } else if (args[1] === 'day') {
            timer = Number(args[0]) * 86400000
        } else {
            return reply('*Select:*\nsecond\nminute\nhour\nday\n\n*Example:*\n.opentime 10 second')
        }

        reply(`‚úÖ ·¥è·¥ò·¥á…¥ ·¥õ…™·¥ç·¥á s·¥á·¥õ “ì·¥è Ä *${q}*. …¢ Ä·¥è·¥ú·¥ò ·¥°…™ ü ü ·¥è·¥ò·¥á…¥ ·¥Ä“ì·¥õ·¥á Ä ·¥õ ú…™s ·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥.`)

        // Reaction ‚è≥ 
        await conn.sendMessage(from, { react: { text: `‚è≥`, key: mek.key } })

        setTimeout(async () => {
            const openMsg = `*_·¥è·¥ò·¥á…¥ ·¥õ…™·¥ç·¥á_* üîì\n*_…¢ Ä·¥è·¥ú·¥ò  ú·¥Äs  ô·¥á·¥á…¥ ·¥è·¥ò·¥á…¥·¥á·¥Ö  ô è  Ä·¥Ä ú·¥ç·¥Ä…¥-·¥ç·¥Ö_*\n*_…¥·¥è·¥° ·¥ç·¥á·¥ç ô·¥á Äs ·¥Ñ·¥Ä…¥ s·¥á…¥·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás._*`

            await conn.groupSettingUpdate(from, 'not_announcement')
            reply(openMsg)

            // Reaction ‚úÖ 
            await conn.sendMessage(from, { react: { text: `‚úÖ`, key: mek.key } })
        }, timer)

    } catch (e) {
        reply('*Error !!*')
        l(e)
    }
})

// üî¥ CLOSE TIME COMMAND
cmd({
    pattern: "closetime",
    react: "üîñ",
    desc: "To close group after a set time",
    category: "group",
    use: '.closetime <number> <second|minute|hour|day>',
    filename: __filename
},
async (conn, mek, m, { from, l, args, q, isGroup, isAdmins, reply }) => {
    try {
        if (!isGroup) return reply(ONLGROUP)
        if (!isAdmins) return reply(ADMIN)

        let timer;
        if (args[1] === 'second') {
            timer = Number(args[0]) * 1000
        } else if (args[1] === 'minute') {
            timer = Number(args[0]) * 60000
        } else if (args[1] === 'hour') {
            timer = Number(args[0]) * 3600000
        } else if (args[1] === 'day') {
            timer = Number(args[0]) * 86400000
        } else {
            return reply('*Select:*\nsecond\nminute\nhour\nday\n\n*Example:*\n.closetime 5 minute')
        }

        reply(`‚úÖ ·¥Ñ ü·¥ès·¥á ·¥õ…™·¥ç·¥á s·¥á·¥õ “ì·¥è Ä *${q}*. …¢ Ä·¥è·¥ú·¥ò ·¥°…™ ü ü ·¥Ñ ü·¥ès·¥á ·¥Ä“ì·¥õ·¥á Ä ·¥õ ú…™s ·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥.`)

        // Reaction ‚è≥ 
        await conn.sendMessage(from, { react: { text: `‚è≥`, key: mek.key } })

        setTimeout(async () => {
            const closeMsg = `*_·¥Ñ ü·¥ès·¥á ·¥õ…™·¥ç·¥á_* üîê\n*_…¢ Ä·¥è·¥ú·¥ò  ú·¥Äs  ô·¥á·¥á…¥ ·¥Ñ ü·¥ès·¥á·¥Ö  ô è  Ä·¥Ä ú·¥ç·¥Ä…¥-·¥ç·¥Ö_*.\n*_…¥·¥è·¥° ·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥s ·¥Ñ·¥Ä…¥ s·¥á…¥·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás.._*`

            await conn.groupSettingUpdate(from, 'announcement')
            reply(closeMsg)

            // Reaction ‚úÖ 
            await conn.sendMessage(from, { react: { text: `‚úÖ`, key: mek.key } })
        }, timer)

    } catch (e) {
        reply('*Error !!*')
        l(e)
    }
})